@page "/assets/list"
@page "/assets/list/FilterByCategory/{CategoryId:int?}"
@using AMS.Application.Shared
@using AMS.Domain.Enums
@using AMS.Web.Components.Layout
@using Microsoft.AspNetCore.Authorization
@inject IAssetService _service
@rendermode InteractiveServer
<title>Asset List</title>
@attribute [Authorize]

<MessageComponent></MessageComponent>

<div class="d-flex justify-content-between mb-2">
    <div class="text-muted">
        <select class="form-select" style="width: auto;" @onchange="OnPageSizeChanged">
            @foreach (var size in pageSizeOptions)
            {
                <option value="@size" selected="@(pagesize == size)">@size / page</option>
            }
        </select>
    </div>
    <div class="">
        <input @bind-value="searchTerm" class="form-control" @bind-value:event="oninput" placeholder="search" />
    </div>
</div>
<table class="table table-bordered">
    <thead>
        <tr>
            <th @onclick="@(() => ApplySorting("Id"))"># @SortIcon("Id")</th>
            <th @onclick="@(() => ApplySorting("name"))">Name @SortIcon("name")</th>
            <th @onclick="@(() => ApplySorting("serailnumber"))">Serial Number @SortIcon("serailnumber")</th>
            <th @onclick="@(() => ApplySorting("category.name"))">Category @SortIcon("category.name")</th>
            <th @onclick="@(() => ApplySorting("status"))">Status @SortIcon("status")</th>
            <th>Allocated To</th>
            <th @onclick="@(() => ApplySorting("purchasedate"))">Purchase Date @SortIcon("purchasedate")</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (assets.Count != 0)
        {
            @foreach (var asset in assets)
            {
                <tr>
                    <td>@asset.Id</td>
                    <td>@asset.Name</td>
                    <td>@asset.SerialNumber</td>
                    <td>@asset.Category.Name</td>
                    <td>
                        @if (asset.Status == AssetStatus.Available)
                        {
                            <p class="badge bg-success">Available</p>
                        }
                        else if (asset.Status == AssetStatus.Allocated)
                        {
                            <span class="badge bg-secondary">Allocated</span>
                        }
                        else if (asset.Status == AssetStatus.InRepair)
                        {
                            <span class="badge bg-danger">InRepair</span>
                        }
                        else
                        {
                            <span class="badge bg-primary">Retired</span>
                        }

                    </td>
                    <td>@asset.AllocatedEmployee?.Name</td>
                    <td>@asset.PurchaseDate.ToShortDateString()</td>
                    <td class="d-flex justify-content-evenly">
                        @if (asset.AllocatedTo.HasValue)
                        {
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => UnAllocateAsset(asset.Id)">Un Allocate</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-outline-primary" @onclick="@(() => _navigate.NavigateTo($"/assets/allocate/{asset.Id}"))">Allocate</button>
                        }
                        -
                        @* <a class="btn btn-outline-primary" href="/assets/edit/@asset.Id">Edit</a> *@
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => _navigate.NavigateTo($"/assets/edit/{asset.Id}"))">Edit</button>
                        -
                        @* <button class="btn btn-sm btn-outline-danger" @disabled="@asset.AllocatedTo.HasValue" @onclick="@(() => ShowDeleteModal(asset.Id))">Delete</button> *@
                        <button class="btn btn-sm btn-outline-danger" disabled="@asset.AllocatedTo.HasValue" @onclick="@(() => ShowDeleteModal(asset.Id))">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8">No Records Found !</td>
            </tr>
        }
    </tbody>
</table>
<Pagination totalRecords="@totalRecords"
            currentPage="@currentPage"
            pagesize="@pagesize"
            GotToPage="GoToPage" />




<ConfirmModal @ref="deleteModal"
              Message="Are you sure you want to delete this asset?"
              TargetId="@SelectedId"
              Show="@ShowModal"
              OnConfirm="OnConfirmedDelete"
              OnCancel="OnCancelledDelete" />

@code {
    [Parameter] public int? CategoryId { get; set; }

    List<AssetDto> assets = new();

    private ConfirmModal deleteModal;
    private bool ShowModal = false;
    private int SelectedId;

    private int totalRecords;
    private int currentPage = 1;
    private int pagesize = 5;

    private string _searchterm = "";
    private string? searchTerm
    {
        get => _searchterm;
        set
        {
            _searchterm = value;
            _ = OnSearchChanged();
        }
    }
    private string? sortcolumn = "Id";
    private bool IsAscending = true;

    private readonly int[] pageSizeOptions = new[] { 2, 5, 10, 25, 50, 100 };

    private RenderFragment SortIcon(string column) => __builder =>
    {
        if (sortcolumn == column)
        {
            var icon = IsAscending ? "▲" : "▼";

            __builder.OpenElement(0, "span");
            __builder.AddAttribute(1, "class", "text-gray text-muted");
            __builder.AddContent(2, icon);
            __builder.CloseElement();
        }
    };

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            pagesize = newSize;
            currentPage = 1; // Reset to first page
            await LoadData();
        }

    }

    private async Task LoadData()
    {
        var req = new PagedRequest
        {
            IsAscending = IsAscending,
            PageNumber = currentPage,
            PageSize = pagesize,
            SearchTerm = searchTerm,
            SortColumn = sortcolumn
        };
        dynamic result;
        if (CategoryId.HasValue)
        {
            result = await _service.GetAssetsByCategoryAsync(CategoryId,req);
        }
        else
        {
            result = await _service.GetAllAssetsAsync(req);
        }
        totalRecords = result.TotalCount;
        assets = result.Items;
    }

    protected override async Task OnInitializedAsync()
    {

        await LoadData();


    }

    protected async Task OnSearchChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ApplySorting(string col)
    {
        if (sortcolumn == col)
        {
            IsAscending = !IsAscending;
        }
        else
        {
            sortcolumn = col;
            IsAscending = true;
        }
        await LoadData();
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadData();
    }

    protected void addAsset()
    {
        _navigate.NavigateTo("/assets/Add");
    }

    private void ShowDeleteModal(int id)
    {
        SelectedId = id;
        ShowModal = true;

        StateHasChanged();
    }

    private async Task OnConfirmedDelete(int id)
    {
        ShowModal = false;
        if( await _service.DeleteAssetAsync(id))
        {
            _msgService.Message = "Asset Deleted successfully!";
            _msgService.Type = "success";
        }
        else
        {
            _msgService.Message = "Can't Delete Asset!";
            _msgService.Type = "error";
        }
        await LoadData();
        StateHasChanged();
    }

    private async Task OnCancelledDelete()
    {
        ShowModal = false;
        StateHasChanged();
    }

    private async Task UnAllocateAsset(int Id)
    {
        if (await _service.UnassignAsset(Id))
        {
            _msgService.Message = "Asset UnAllocated successfully!";
            _msgService.Type = "success";
            await LoadData();

        }
        else
        {
            _msgService.Message = "Can't UnAllocate Asset!";
            _msgService.Type = "error";
        }
    }
}