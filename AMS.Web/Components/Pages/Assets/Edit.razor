@page "/assets/edit/{id:int}"
@using AMS.Application.Service.Category
@using AMS.Domain.Entities
@using AMS.Domain.Enums
@rendermode InteractiveServer
@inject IAssetService _service
@inject ICategoryService _categoryService
<title>Edit Asset</title>
@attribute [Authorize]

<div class="card">
    <div class="card-header">
        Edit
    </div>
    <EditForm Model="asset" OnValidSubmit="submitEditedAsset" FormName="EditAssetForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <label>Asset Name</label>
                    <InputText class="form-control" @bind-Value="asset.Name" />
                </div>

                <div class="col-md-3">
                    <label>Serial Number</label>
                    <InputText class="form-control" @bind-Value="asset.SerialNumber" />
                </div>



                <div class="col-md-3">
                    <label>Purchase Date</label>
                    <InputDate class="form-control" @bind-Value="asset.PurchaseDate" />
                </div>

                <div class="col-md-3">
                    <label>Category</label>
                    <InputSelect class="form-control" @bind-Value="asset.CategoryId">
                        <option value="">-- Select Category --</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-md-3">
                    <label>Status</label>
                    <InputSelect class="form-control" @bind-Value="asset.Status" disabled="@(asset.AllocatedTo.HasValue)">
                        @foreach (AssetStatus status in Enum.GetValues(typeof(AssetStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>

                </div>
            </div>
        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary">Submit</button>
            <NavLink class="btn btn-secondary" href="/assets/list">Cancel</NavLink>
        </div>
    </EditForm>
</div>


@code {
    [Parameter] public int id { set; get; }
    private List<AssetCategory> Categories = new();

    private AssetDto asset = new();

    protected override async Task OnInitializedAsync()
    {
        asset = await _service.GetAssetByIdAsync(id);
        Categories = await _categoryService.GetAllAsync();
    }
    private async Task submitEditedAsset()
    {
        var res = await _service.UpdateAssetAsync(id, asset);
        if (res)
        {
            _msgService.Message = "Asset Updated successfully!";
            _msgService.Type = "success";
        }
        else
        {
            _msgService.Message = "Updating Asset Failed!";
            _msgService.Type = "error";
        }
        _navigate.NavigateTo("/assets/list");

    }


}
