<title>Category List</title>
@using AMS.Application.Service.Category
@using AMS.Domain.Entities
@page "/category/list"
@inject ICategoryService _service

@using AMS.Web.Components.Layout
@rendermode InteractiveServer


@if (categories.Count != 0)
{
    int i = 0;
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Description</th>
                <th>Assets Under</th>
                <th>Assets</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@(++i)</td>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>@category.Assets?.Count</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => _navigate.NavigateTo($"///{category.Assets}"))">View Assets</button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => _navigate.NavigateTo($"/category/edit/{category.Id}"))">Edit</button>

                        <button class="btn btn-sm btn-outline-danger" disabled="@(category.Assets?.Count != 0 ? true : false)" @onclick="@(() => ShowDeleteModal(category.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No Records Found !</p>
}


<ConfirmModal @ref="deleteModal"
              Message="Are you sure you want to delete this Category?"
              TargetId="@SelectedId"
              Show="@ShowModal"
              OnConfirm="OnConfirmedDelete"
              OnCancel="OnCancelledDelete" />

@code {
    private List<AssetCategory> categories = new();

    private ConfirmModal deleteModal;
    private int SelectedId;
    private bool ShowModal = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await _service.GetAllAsync();
    }

    protected void addCategory()
    {
        _navigate.NavigateTo("/category/add");
    }

    private void ShowDeleteModal(int id)
    {
        SelectedId = id;
        ShowModal = true;
        StateHasChanged();
    }

    private async Task OnConfirmedDelete(int id)
    {
        ShowModal = false;
        await _service.DeleteAsync(id);
        categories = await _service.GetAllAsync();
        StateHasChanged();
    }

    private void OnCancelledDelete()
    {
        ShowModal = false;
        StateHasChanged();
    }

}
