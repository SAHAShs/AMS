@page "/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer
<h3 class="text-center my-4">My Profile</h3>

<div class="d-flex justify-content-center">
    <div class="@CardClass" style="width: 100%; max-width: 500px;">
        <div class="text-center mb-4">
            <img src="https://avatars.githubusercontent.com/u/9919?s=280&v=4" class="rounded-circle" width="120" height="120" />
            <h5 class="mt-3 mb-0">@UserName</h5>
            <p class="text-muted">@UserRole</p>
        </div>

        <ul class="list-group list-group-flush">
            <li class="@ItemClass">
                <strong>User ID:</strong> @UserId
            </li>
            <li class="@ItemClass">
                <strong>Email:</strong> @UserEmail
            </li>
            <li class="@ItemClass">
                <strong>Role:</strong> @UserRole
            </li>
        </ul>

        <div class="mt-4 text-center">
            <button class="btn btn-outline-primary me-2">Edit Profile</button>
            <button class="btn btn-outline-danger">Logout</button>
        </div>

        <div class="text-center mt-3">
            <button class="btn btn-sm btn-secondary" @onclick="ToggleTheme">
                Switch to @(IsDarkMode ? "Light" : "Dark") Mode
            </button>
        </div>
    </div>
</div>

@code {
    private string UserName = "Loading...";
    private string UserEmail = "unknown@example.com";
    private string UserRole = "User";
    private string UserId = "0";
    private bool IsDarkMode = false;
    private string CardClass => $"card shadow p-4 {(IsDarkMode ? "bg-dark text-white" : "bg-white")}";
    private string ItemClass => $"@ItemClass {(IsDarkMode ? "bg-dark text-white border-secondary" : "")}";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name ?? "Unknown";
            UserEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value ?? "not set";
            UserRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? "N/A";
            UserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "0";
        }
        else
        {
            UserName = "Guest";
            UserEmail = "-";
            UserRole = "Anonymous";
            UserId = "-";
        }
    }
    private void ToggleTheme()
    {
        IsDarkMode = !IsDarkMode;
    }
}
